### AUTO GENERATED. DO NOT MODIFY. ###
# This file should be auto generated by the files in the src folder.
# You can update it by running `yarn run circleci:update-config`.
commands:
    check_config:
        description: This command builds the circle config from the files in src and validates that it is up-to-date and valid.
        steps:
            - run:
                command: curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | sudo bash
                name: Install CircleCI CLI
            - run:
                command: yarn run circleci:update-config
                name: Build circle config
            - run:
                command: |
                    FILES_MODIFIED=""
                    setcommit () {
                      FILES_MODIFIED=$(git status -s | grep -i -E '.*circleci/config.yml')
                    }
                    setcommit || true
                    if [ -z "$FILES_MODIFIED" ]
                    then
                      echo "The CircleCI config is up to date."
                      exit 0;
                    else
                      echo "The CircleCI config is not up to date. You can update it by running `yarn run circleci:update-config`."
                      exit 1;
                    fi
                name: CircleCI config up to date
            - run:
                command: circleci config validate
                name: Validate circle config
    notify:
        description: Send a notification (to Mattermost) at the end of a job, based on success or failure. Must be the last step in a job.
        parameters:
            channel:
                default: lunes-app
                type: string
            failure_mentions:
                default: '@max.ammann @stefanie.metzger @sarah.sporck @steffen.kleinle @andreas.fischer'
                type: string
            only_for_branch:
                default: main
                type: string
            success_mentions:
                default: ""
                type: string
            success_message:
                default: ""
                type: string
        steps:
            - run:
                command: |
                    if [ -n "<< parameters.failure_mentions >>" ]; then
                        echo 'export MM_MESSAGE=":fire: The [${CIRCLE_JOB}](${CIRCLE_BUILD_URL}) job has failed on the main branch! :fire:\n<< parameters.failure_mentions >>"' >> $BASH_ENV
                    else
                        echo 'export MM_MESSAGE=":fire: The [${CIRCLE_JOB}](${CIRCLE_BUILD_URL}) job has failed on the main branch! :fire:"' >> $BASH_ENV
                    fi
                name: Mattermost - Prepare failure message
                when: on_fail
            - run:
                command: |
                    if [ -n "<< parameters.success_message >>" ]; then
                        if [ -n "<< parameters.success_mentions >>" ]; then
                            echo 'export MM_MESSAGE="<< parameters.success_message >>\n<< parameters.success_mentions >>"' >> $BASH_ENV
                        else
                            echo 'export MM_MESSAGE="<< parameters.success_message >>"' >> $BASH_ENV
                        fi
                    fi
                name: Mattermost - Prepare success message
                when: on_success
            - run:
                command: |
                    #!/bin/bash

                    Send_notification() {
                        if [ "<< parameters.only_for_branch >>" != "${CIRCLE_BRANCH}" ]; then
                            echo "Not on << parameters.only_for_branch >> branch. Skipping."
                            exit 0
                        fi

                        if [ -z "${MM_MESSAGE}" ]; then
                            echo "No message set. Skipping."
                            exit 0
                        fi

                        if [ -z "${MM_WEBHOOK_LUNES}" ]; then
                            echo "NO MATTERMOST WEBHOOK SET"
                            echo "Please add the environment variable \"MM_WEBHOOK_LUNES\" in the settings for this project."
                            exit 1
                        fi

                        STATUS=$(curl -o /dev/null -s -w "%{http_code}\n" -X POST -H 'Content-type: application/json' \
                            --data \
                            "{
                              \"channel\": \"<< parameters.channel >>\",
                              \"username\": \"circleci\",
                              \"icon_emoji\": \":lunes:\",
                              \"text\": \"${MM_MESSAGE}\"
                            }" "${MM_WEBHOOK_LUNES}")

                        if [ "$STATUS" -ne "200" ]; then
                            echo "Notification not sent due to an error. Status: $STATUS. Please check the webhook URL"
                            exit 1
                        fi

                        echo "Notification sent!"
                        exit 0
                      }

                      Send_notification
                name: Mattermost Status Alert
                when: always
    persist_environment_variables:
        description: Writes the environment variables to the file 'environment_variables'. Make sure the file is persisted and has been attached.
        steps:
            - run:
                command: cat ${BASH_ENV}
                name: List environment variables
            - run:
                command: cat ${BASH_ENV} >> environment_variables
                name: Save environment variables to file
            - persist_to_workspace:
                paths:
                    - environment_variables
                root: ./
    prepare_workspace:
        description: Attach the workspace at ~/attached_workspace and list its contents
        steps:
            - attach_workspace:
                at: ~/attached_workspace
            - run:
                command: ls ~/attached_workspace
                name: Attached workspace contents
            - run:
                command: ls -R ~/attached_workspace
                name: Recursively list attached workspace contents
    restore_cocoa_pods_cache:
        description: Restores and saves the cocoa pods cache.
        steps:
            - restore_cache:
                keys:
                    - 3-pods-{{ arch }}-{{ checksum "ios/Podfile.lock" }}
                    - 3-pods-{{ arch }}-
                name: Restore CocoaPods Cache
            - run:
                command: bundle exec pod install
                name: '[CP] Install CocoaPods'
                working_directory: ios
            - save_cache:
                key: 3-pods-{{ arch }}-{{ checksum "ios/Podfile.lock" }}
                name: Save CocoaPods Cache
                paths:
                    - ~/Library/Caches/CocoaPods/
    restore_environment_variables:
        description: Sets the environment variables specified in the file 'environment_variables'. Make sure the file is persisted and has been attached.
        steps:
            - run:
                command: cat ~/attached_workspace/environment_variables
                name: List environment variables
            - run:
                command: cat ~/attached_workspace/environment_variables >> ${BASH_ENV}
                name: Restore environment variables
    restore_ruby_cache:
        description: Restores and saves fastlane cache of the passed directory.
        parameters:
            directory:
                default: android
                type: string
        steps:
            - restore_cache:
                keys:
                    - 3-gems-{{ arch }}-{{ checksum "<< parameters.directory >>/Gemfile.lock" }}
                    - 3-gems-{{ arch }}-
            - run:
                command: bundle check || bundle install
                name: Install Fastlane
                working_directory: << parameters.directory >>
            - save_cache:
                key: 3-gems-{{ arch }}-{{ checksum "<< parameters.directory >>/Gemfile.lock" }}
                paths:
                    - << parameters.directory >>/vendor/bundle
    restore_yarn_cache:
        description: Restores and saves the node_modules directory
        steps:
            - restore_cache:
                keys:
                    - yarn-packages-{{ arch }}-{{ checksum "yarn.lock" }}
                name: Restore Yarn Package Cache
            - run:
                command: yarn install --immutable
                name: Install Dependencies
            - save_cache:
                key: yarn-packages-{{ arch }}-{{ checksum "yarn.lock" }}
                name: Save Yarn Package Cache
                paths:
                    - .yarn/cache
    restore_yarn_tools_cache:
        description: Restores and saves the tools node_modules directory
        steps:
            - restore_cache:
                key: 2-yarn-{{ arch }}-{{ checksum "tools/yarn.lock" }}-{{ checksum "tools/package.json" }}
                name: Restore Yarn Tools Package Cache
            - run:
                command: yarn install --immutable
                name: Install Dependencies
                working_directory: tools
            - save_cache:
                key: 2-yarn-{{ arch }}-{{ checksum "tools/yarn.lock" }}-{{ checksum "tools/package.json" }}
                name: Save Yarn Tools Package Cache
                paths:
                    - tools/.yarn/cache
jobs:
    build_android:
        docker:
            - image: cimg/android:2022.03.1-node
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
            TOTAL_CPUS: 3
        resource_class: medium+
        shell: /bin/bash -eo pipefail
        steps:
            - add_ssh_keys:
                fingerprints:
                    - 24:1d:3b:b7:b3:49:69:d7:54:c3:93:a5:a2:d1:71:db
            - checkout
            - restore_ruby_cache:
                directory: android
            - restore_yarn_cache
            - prepare_workspace
            - restore_environment_variables
            - run:
                command: bundle exec fastlane keystore
                name: '[FL] Prepare Android Keystore'
                working_directory: android
            - run:
                command: bundle exec fastlane build version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE}
                name: '[FL] Build Android'
                working_directory: android
            - run:
                command: |
                    mkdir -p sourcemaps/
                    cp android/app/build/generated/sourcemaps/react/release/index.android.bundle.map sourcemaps/
                    cp android/app/build/generated/assets/react/release/index.android.bundle sourcemaps/
                name: Prepare Sourcemaps
            - persist_to_workspace:
                paths:
                    - sourcemaps/*
                root: .
            - run:
                command: mkdir -p attached_workspace && mv app/build/outputs/apk/release/app-release.apk attached_workspace/app-release.apk
                name: Move apk
                working_directory: android
            - persist_to_workspace:
                paths:
                    - app-release.apk
                root: android/attached_workspace
            - store_artifacts:
                path: android/attached_workspace/app-release.apk
            - notify
    build_ios:
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
            FL_OUTPUT_DIR: output
            TOTAL_CPUS: 4
        macos:
            xcode: 14.2.0
        resource_class: medium
        shell: /bin/bash --login -o pipefail
        steps:
            - add_ssh_keys:
                fingerprints:
                    - 24:1d:3b:b7:b3:49:69:d7:54:c3:93:a5:a2:d1:71:db
            - checkout
            - prepare_workspace
            - restore_environment_variables
            - restore_yarn_cache
            - restore_ruby_cache:
                directory: ios
            - restore_cocoa_pods_cache
            - run:
                command: bundle exec fastlane build version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE}
                name: Build iOS
                working_directory: ios
            - run:
                command: |
                    mkdir -p sourcemaps/
                    cp ios/output/app-release.ios.bundle* sourcemaps/
                name: Prepare Sourcemaps
            - persist_to_workspace:
                paths:
                    - sourcemaps/*
                root: .
            - store_artifacts:
                path: ios/output/gym/app-release.ipa
            - persist_to_workspace:
                paths:
                    - app-release.ipa
                root: ios/output/gym
            - notify
    bump_version:
        docker:
            - image: cimg/node:14.19.0
        parameters:
            prepare_delivery:
                default: false
                description: Whether to prepare for a delivery. If true, the version bump is committed and a JIRA release is created.
                type: boolean
        resource_class: small
        steps:
            - checkout
            - restore_yarn_tools_cache
            - run:
                command: echo "export NEW_VERSION_NAME=$(yarn next-version calc | jq .versionName)" >> ${BASH_ENV}
                name: Calculate next version name
                working_directory: tools
            - run:
                command: echo "export NEW_VERSION_CODE=$(yarn next-version calc | jq .versionCode)" >> ${BASH_ENV}
                name: Calculate next version code
                working_directory: tools
            - when:
                condition: << parameters.prepare_delivery >>
                steps:
                    - run:
                        command: yarn git-version bump-to ${NEW_VERSION_NAME} ${NEW_VERSION_CODE} --deliverino-private-key ${DELIVERINO_PRIVATE_KEY} --owner ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME} --branch ${CIRCLE_BRANCH}
                        name: Bump git version
                        working_directory: tools
                    - run:
                        command: yarn jira-release create ${NEW_VERSION_NAME} --private-key ${JIRA_PRIVATE_KEY} --access-token ${JIRA_OAUTH_TOKEN} --consumer-key ${JIRA_CONSUMER_KEY} --project-name ${CIRCLE_PROJECT_REPONAME}
                        name: Create jira release
                        working_directory: tools
            - persist_environment_variables
            - notify
    check:
        docker:
            - image: cimg/node:14.19.0
        steps:
            - checkout
            - restore_yarn_cache
            - restore_yarn_tools_cache
            - check_config
            - run:
                command: yarn lint
                name: Linting check
            - run:
                command: yarn ts:check
                name: TS check
            - run:
                command: yarn prettier --check .
                name: Prettier check
            - run:
                command: yarn test
                name: Run unit tests
            - notify
    deliver_android:
        docker:
            - image: cimg/android:2022.03.1-node
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
        parameters:
            production_delivery:
                description: Whether to deliver the build to production.
                type: boolean
        shell: /bin/bash -eo pipefail
        steps:
            - checkout
            - prepare_workspace
            - restore_environment_variables
            - restore_yarn_tools_cache
            - restore_ruby_cache:
                directory: android
            - run:
                command: yarn manage-metadata prepare-metadata playstore
                name: Parse german android release notes
                working_directory: tools
            - run:
                command: bundle exec fastlane validate_play_store_key
                name: Validate Play Store Key
                working_directory: android
            - prepare_workspace
            - restore_environment_variables
            - restore_yarn_cache
            - run:
                command: bundle exec fastlane upload_to_playstore version_name:${NEW_VERSION_NAME} version_code:${NEW_VERSION_CODE} production_delivery:"<< parameters.production_delivery >>"
                name: PlayStore Upload
                working_directory: android
            - run:
                command: tools/sentry-release "app.lunes" "${NEW_VERSION_NAME}" ~/attached_workspace/sourcemaps/ --version-code "${NEW_VERSION_CODE}"
                name: Sentry Upload
            - notify
    deliver_browser_stack:
        docker:
            - image: cimg/android:2022.03.1-node
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
        shell: /bin/bash -eo pipefail
        steps:
            - checkout
            - prepare_workspace
            - restore_ruby_cache:
                directory: android
            - run:
                command: mv ~/attached_workspace/app-release.apk ~/attached_workspace/${CIRCLE_BRANCH////-}.apk
                name: Rename apk
            - run:
                command: mv ~/attached_workspace/app-release.ipa ~/attached_workspace/${CIRCLE_BRANCH////-}.ipa
                name: Rename ipa
            - run:
                command: bundle exec fastlane android upload_to_browserstack file_path:attached_workspace/${CIRCLE_BRANCH////-}.apk
                name: BrowserStack Upload android
                working_directory: android
            - restore_ruby_cache:
                directory: ios
            - run:
                command: bundle exec fastlane ios upload_to_browserstack file_path:attached_workspace/${CIRCLE_BRANCH////-}.ipa
                name: BrowserStack Upload iOS
                working_directory: ios
            - run:
                command: mv ~/attached_workspace/${CIRCLE_BRANCH////-}.apk ~/attached_workspace/app-release.apk
                name: Undo rename apk
            - run:
                command: mv ~/attached_workspace/${CIRCLE_BRANCH////-}.ipa ~/attached_workspace/app-release.ipa
                name: Undo raname ipa
            - notify
    deliver_ios:
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
        macos:
            xcode: 14.2.0
        parameters:
            production_delivery:
                default: false
                description: Whether to deliver the build to production.
                type: boolean
        shell: /bin/bash --login -o pipefail
        steps:
            - checkout
            - prepare_workspace
            - restore_environment_variables
            - restore_yarn_tools_cache
            - restore_ruby_cache:
                directory: ios
            - run:
                command: yarn manage-metadata prepare-metadata appstore
                name: Parse german ios release notes
                working_directory: tools
            - when:
                condition: << parameters.production_delivery >>
                steps:
                    - run:
                        command: bundle exec fastlane ios upload_to_appstoreconnect ipa_path:attached_workspace/app-release.ipa version_name:${NEW_VERSION_NAME}
                        name: '[FL] App Store Connect Upload'
                        working_directory: ios
            - unless:
                condition: << parameters.production_delivery >>
                steps:
                    - run:
                        command: bundle exec fastlane upload_to_test_flight ipa_path:attached_workspace/app-release.ipa
                        name: '[FL] TestFlight Upload'
                        working_directory: ios
            - run:
                command: tools/sentry-release "app.lunes" "${NEW_VERSION_NAME}" ~/attached_workspace/sourcemaps/ --version-code "${NEW_VERSION_CODE}"
                name: Sentry Upload
            - notify
    move_release_notes:
        docker:
            - image: cimg/node:14.19.0
        resource_class: small
        steps:
            - checkout
            - prepare_workspace
            - restore_environment_variables
            - restore_yarn_tools_cache
            - run:
                command: yarn move-release-notes move-to ${NEW_VERSION_NAME} --deliverino-private-key ${DELIVERINO_PRIVATE_KEY} --owner ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME} --branch ${CIRCLE_BRANCH}
                name: Move release notes
                working_directory: tools
            - notify
    notify_android:
        docker:
            - image: cimg/node:14.19.0
        parameters:
            production_delivery:
                description: Whether builds are delivered to the production store. If set to true, jira and github releases are created.
                type: boolean
        resource_class: small
        steps:
            - checkout
            - prepare_workspace
            - restore_environment_variables
            - restore_yarn_tools_cache
            - run:
                command: echo "export ANDROID_ARTIFACT_URLS='$(echo $(cat $(ls | grep apk-url)))'" >> ${BASH_ENV}
                name: Prepare artifact urls
                working_directory: ~/attached_workspace
            - run:
                command: yarn github-release create android ${NEW_VERSION_NAME} ${NEW_VERSION_CODE} --deliverino-private-key ${DELIVERINO_PRIVATE_KEY} --owner ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME} --release-notes "$(yarn manage-metadata parse-release-notes --android)"<<^ parameters.production_delivery >> --beta-release<</ parameters.production_delivery >> --download-links "${ANDROID_ARTIFACT_URLS}"
                name: Create github release
                working_directory: tools
            - run:
                command: echo "export RELEASE_NOTES=$(yarn --silent --cwd tools manage-metadata parse-release-notes --android)" >> ${BASH_ENV}
                name: Create release notes
            - notify:
                channel: releases
                success_message: <<^ parameters.production_delivery >>[Development] <</ parameters.production_delivery >>Lunes ${NEW_VERSION_NAME} has been released successfully on Android!\n${RELEASE_NOTES}\n${ANDROID_ARTIFACT_URLS}
    notify_ios:
        docker:
            - image: cimg/node:14.19.0
        parameters:
            production_delivery:
                description: Whether builds are delivered to the production store. If set to true, jira and github releases are created.
                type: boolean
        resource_class: small
        steps:
            - checkout
            - prepare_workspace
            - restore_environment_variables
            - restore_yarn_tools_cache
            - run:
                command: echo "export IOS_ARTIFACT_URLS='$(echo $(cat $(ls | grep ipa-url)))'" >> ${BASH_ENV}
                name: Prepare artifact urls
                working_directory: ~/attached_workspace
            - run:
                command: yarn github-release create ios ${NEW_VERSION_NAME} ${NEW_VERSION_CODE} --deliverino-private-key ${DELIVERINO_PRIVATE_KEY} --owner ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME} --release-notes "$(yarn manage-metadata parse-release-notes --ios)"<<^ parameters.production_delivery >> --beta-release<</ parameters.production_delivery >> --download-links "${IOS_ARTIFACT_URLS}"
                name: Create github release
                working_directory: tools
            - run:
                command: echo "export RELEASE_NOTES=$(yarn --silent --cwd tools manage-metadata parse-release-notes --ios)" >> ${BASH_ENV}
                name: Create release notes
            - notify:
                channel: releases
                success_message: <<^ parameters.production_delivery >>[Development] <</ parameters.production_delivery >>Lunes ${NEW_VERSION_NAME} has been released successfully on iOS!\n${RELEASE_NOTES}\n${IOS_ARTIFACT_URLS}
    promote_android:
        docker:
            - image: cimg/android:2022.03.1-node
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
        resource_class: small
        shell: /bin/bash -eo pipefail
        steps:
            - checkout
            - restore_ruby_cache:
                directory: android
            - run:
                command: bundle exec fastlane android playstore_promote
                name: '[FL] Play Store Promotion'
                working_directory: android
            - notify
    promote_ios:
        environment:
            FASTLANE_SKIP_UPDATE_CHECK: true
        macos:
            xcode: 14.2.0
        shell: /bin/bash --login -o pipefail
        steps:
            - checkout
            - restore_yarn_tools_cache
            - restore_yarn_cache
            - restore_ruby_cache:
                directory: ios
            - run:
                command: bundle exec fastlane ios appstoreconnect_promote
                name: '[FL] App Store Connect Promotion'
                working_directory: ios
            - notify
parameters:
    run_browserstack_delivery:
        default: false
        type: boolean
    run_commit:
        default: true
        type: boolean
    run_dev_delivery:
        default: false
        type: boolean
    run_prod_delivery:
        default: false
        type: boolean
    run_promote:
        default: false
        type: boolean
version: 2.1
workflows:
    browserstack_delivery:
        jobs:
            - bump_version:
                context:
                    - mattermost
                prepare_delivery: false
            - build_android:
                context:
                    - mattermost
                    - credentials-repo
                    - credentials-lunes
                requires:
                    - bump_version
            - build_ios:
                context:
                    - mattermost
                    - fastlane-match
                    - tuerantuer-apple
                requires:
                    - bump_version
            - deliver_browser_stack:
                context:
                    - mattermost
                    - browserstack
                requires:
                    - build_android
                    - build_ios
        when: << pipeline.parameters.run_browserstack_delivery >>
    commit:
        jobs:
            - check:
                context:
                    - mattermost
        when:
            and:
                - << pipeline.parameters.run_commit >>
                - and:
                    - not:
                        equal:
                            - main
                            - << pipeline.git.branch >>
    commit_main:
        jobs:
            - check:
                context:
                    - mattermost
            - bump_version:
                context:
                    - mattermost
                prepare_delivery: false
            - build_android:
                context:
                    - mattermost
                    - credentials-repo
                    - credentials-lunes
                requires:
                    - check
                    - bump_version
            - build_ios:
                context:
                    - mattermost
                    - fastlane-match
                    - tuerantuer-apple
                requires:
                    - check
                    - bump_version
            - deliver_browser_stack:
                context:
                    - mattermost
                    - browserstack
                requires:
                    - build_android
                    - build_ios
        when:
            and:
                - << pipeline.parameters.run_commit >>
                - equal:
                    - main
                    - << pipeline.git.branch >>
    dev_delivery:
        jobs:
            - check:
                context:
                    - mattermost
            - bump_version:
                context:
                    - mattermost
                    - deliverino
                    - jira
                prepare_delivery: true
            - build_android:
                context:
                    - mattermost
                    - credentials-repo
                    - credentials-lunes
                requires:
                    - check
                    - bump_version
            - build_ios:
                context:
                    - mattermost
                    - fastlane-match
                    - tuerantuer-apple
                requires:
                    - check
                    - bump_version
            - deliver_browser_stack:
                context:
                    - mattermost
                    - browserstack
                requires:
                    - build_android
                    - build_ios
            - deliver_android:
                context:
                    - mattermost
                    - tuerantuer-google-play
                    - sentry
                production_delivery: false
                requires:
                    - build_android
            - deliver_ios:
                context:
                    - mattermost
                    - tuerantuer-apple
                    - sentry
                production_delivery: false
                requires:
                    - build_ios
            - notify_android:
                context:
                    - mattermost
                    - deliverino
                production_delivery: false
                requires:
                    - deliver_android
            - notify_ios:
                context:
                    - mattermost
                    - deliverino
                production_delivery: false
                requires:
                    - deliver_ios
            - move_release_notes:
                context:
                    - mattermost
                    - deliverino
                requires:
                    - notify_android
                    - notify_ios
        when: << pipeline.parameters.run_dev_delivery >>
    prod_delivery:
        jobs:
            - check:
                context:
                    - mattermost
            - bump_version:
                context:
                    - mattermost
                    - deliverino
                    - jira
                prepare_delivery: true
            - build_android:
                context:
                    - mattermost
                    - credentials-repo
                    - credentials-lunes
                requires:
                    - check
                    - bump_version
            - build_ios:
                context:
                    - mattermost
                    - fastlane-match
                    - tuerantuer-apple
                requires:
                    - check
                    - bump_version
            - deliver_android:
                context:
                    - mattermost
                    - tuerantuer-google-play
                production_delivery: true
                requires:
                    - build_android
            - deliver_ios:
                context:
                    - mattermost
                    - tuerantuer-apple
                production_delivery: true
                requires:
                    - build_ios
            - notify_android:
                context:
                    - mattermost
                    - deliverino
                production_delivery: true
                requires:
                    - deliver_android
            - notify_ios:
                context:
                    - mattermost
                    - deliverino
                production_delivery: true
                requires:
                    - deliver_ios
            - move_release_notes:
                context:
                    - mattermost
                    - deliverino
                requires:
                    - notify_android
                    - notify_ios
        when: << pipeline.parameters.run_prod_delivery >>
    promote:
        jobs:
            - promote_android:
                context:
                    - mattermost
                    - tuerantuer-google-play
            - promote_ios:
                context:
                    - mattermost
                    - tuerantuer-apple
        when: << pipeline.parameters.run_promote >>
    version: 2

